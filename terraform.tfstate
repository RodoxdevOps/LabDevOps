{
  "version": 4,
  "terraform_version": "1.3.3",
  "serial": 5,
  "lineage": "d9d61a69-349b-b094-1c34-fd4efe68b56c",
  "outputs": {
    "public_fqdn": {
      "value": "ec2-54-167-91-234.compute-1.amazonaws.com",
      "type": "string"
    },
    "public_ip": {
      "value": "54.167.91.234",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "windows-2019",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-1::image/ami-026bb75827bd3d68d",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0dc2ea8e1e2f5c26a",
                  "throughput": "0",
                  "volume_size": "30",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "xvdca",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "xvdcb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              },
              {
                "device_name": "xvdcc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral2"
              },
              {
                "device_name": "xvdcd",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral3"
              },
              {
                "device_name": "xvdce",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral4"
              },
              {
                "device_name": "xvdcf",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral5"
              },
              {
                "device_name": "xvdcg",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral6"
              },
              {
                "device_name": "xvdch",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral7"
              },
              {
                "device_name": "xvdci",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral8"
              },
              {
                "device_name": "xvdcj",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral9"
              },
              {
                "device_name": "xvdck",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral10"
              },
              {
                "device_name": "xvdcl",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral11"
              },
              {
                "device_name": "xvdcm",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral12"
              },
              {
                "device_name": "xvdcn",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral13"
              },
              {
                "device_name": "xvdco",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral14"
              },
              {
                "device_name": "xvdcp",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral15"
              },
              {
                "device_name": "xvdcq",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral16"
              },
              {
                "device_name": "xvdcr",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral17"
              },
              {
                "device_name": "xvdcs",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral18"
              },
              {
                "device_name": "xvdct",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral19"
              },
              {
                "device_name": "xvdcu",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral20"
              },
              {
                "device_name": "xvdcv",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral21"
              },
              {
                "device_name": "xvdcw",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral22"
              },
              {
                "device_name": "xvdcx",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral23"
              },
              {
                "device_name": "xvdcy",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral24"
              },
              {
                "device_name": "xvdcz",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral25"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-10-27T23:57:09.000Z",
            "deprecation_time": "2024-10-27T23:57:09.000Z",
            "description": "Microsoft Windows Server 2019 with Desktop Experience Locale English AMI provided by Amazon",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "architecture",
                "values": [
                  "x86_64"
                ]
              },
              {
                "name": "name",
                "values": [
                  "Windows_Server-2019-English-Full-Base-*"
                ]
              },
              {
                "name": "virtualization-type",
                "values": [
                  "hvm"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-026bb75827bd3d68d",
            "image_id": "ami-026bb75827bd3d68d",
            "image_location": "amazon/Windows_Server-2019-English-Full-Base-2022.10.27",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "imds_support": "",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "Windows_Server-2019-English-Full-Base-2022.10.27",
            "name_regex": null,
            "owner_id": "801119661308",
            "owners": [
              "amazon"
            ],
            "platform": "windows",
            "platform_details": "Windows",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0dc2ea8e1e2f5c26a",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances:0002",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "windows-userdata",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "7a9be1ecaddecad87a30cb8d2d06012ae7986b608d6870aa41d64ca09b222698",
            "rendered": "      \u003cpowershell\u003e\r\n      $logfilepath=\"C:\\agent.log\"\r\n      $fqdn=\"$env:computername\"\r\n      $port=5986 \r\n\r\n\r\n      $username = 'winadmin1'\r\n      $password = ConvertTo-SecureString '' -AsPlainText -Force \r\n\r\n\r\n      Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser -Force -ErrorAction Ignore\r\n      $ErrorActionPreference = \"stop\"\r\n\r\n      function Write-Log {\r\n        param(\r\n            [Parameter(Mandatory = $true)][string] $message,\r\n            [Parameter(Mandatory = $false)]\r\n            [ValidateSet(\"INFO\",\"WARN\",\"ERROR\")]\r\n            [string] $level = \"INFO\"\r\n        )\r\n        # Create timestamp\r\n        $timestamp = (Get-Date).toString(\"yyyy/MM/dd HH:mm:ss\")\r\n        # Append content to log file\r\n        Add-Content -Path $logfilepath -Value \"$timestamp [$level] - $message\"\r\n      }\r\n\r\n\r\n      function Create-LocalAdmin {\r\n          process {\r\n            try {\r\n              # Create new local user\r\n              New-LocalUser \"$username\" -Password $password -FullName \"$username\" -Description \"local admin\" -ErrorAction stop\r\n              Write-Log -message \"$username local user created\"\r\n\r\n              # Add user to administrator group\r\n              Add-LocalGroupMember -Group \"Administrators\" -Member \"$username\" -ErrorAction stop\r\n              Write-Log -message \"$username added to the Administrators group\"\r\n\r\n            }catch{ Write-log -message $_.Exception.message -level \"ERROR\"}\r\n          }    \r\n      }\r\n\r\n\r\n      function Delete-WinRMListener {\r\n          process {\r\n              $config = winrm enumerate winrm/config/listener\r\n              foreach($conf in $config) {\r\n                  Write-Log -message \"verifying listener configuration\"\r\n                  if($conf.Contains(\"HTTPS\")) {\r\n                      try {\r\n                          Write-Log -message \"HTTPS is already configured. Deleting the exisiting configuration\"\r\n                          Remove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse\r\n                      } catch { Write-log -message \"Remove HTTPS listener - \" + $_.Exception.message -level \"ERROR\"}\r\n                      break\r\n                  }\r\n              }\r\n          }\r\n      }\r\n\r\n\r\n      function Configure-WinRMHttpsListener {\r\n          \r\n          Delete-WinRMListener\r\n          \r\n            try {\r\n              Write-Log -message \"creating self-signed certificate\"\r\n              $Cert = (New-SelfSignedCertificate -CertstoreLocation Cert:\\LocalMachine\\My -dnsname $fqdn -NotAfter (Get-Date).AddMonths(36)).Thumbprint\r\n              \r\n              if(-not $Cert) {\r\n                  throw \"Failed to create the test certificate.\"\r\n                  Write-Log -message \"failed to create certificate\" -level \"ERROR\"\r\n              }\r\n              $WinrmCreate= \"winrm create --% winrm/config/Listener?Address=*+Transport=HTTPS @{Hostname=`\"$fqdn`\";CertificateThumbprint=`\"$Cert`\"}\"\r\n              invoke-expression $WinrmCreate\r\n              winrm set winrm/config/service/auth '@{Basic=\"true\"}'\r\n            } catch { Write-log -message \"Create certificate - \"+ $_.Exception.message -level \"ERROR\"}\r\n          \r\n      }\r\n\r\n\r\n      function Add-FirewallRule {\r\n          \r\n            try {\r\n              # Delete an exisitng rule\r\n              Write-Log -message \"Deleting the existing firewall rule for port $port\"\r\n              netsh advfirewall firewall delete rule name=\"Windows Remote Management (HTTPS-In)\" dir=in protocol=TCP localport=$port | Out-Null\r\n\r\n              # Add a new firewall rule\r\n              Write-Log -message \"Adding the firewall rule for port $port\"\r\n              netsh advfirewall firewall add rule name=\"Windows Remote Management (HTTPS-In)\" dir=in action=allow protocol=TCP localport=$port | Out-Null\r\n            } catch { Write-log -message \"Add/Remove firewall rule - \"+ $_.Exception.message -level \"ERROR\"}\r\n          \r\n      }\r\n\r\n\r\n      function Configure-WinRMService {\r\n\r\n          try {\r\n              Write-Log -message \"Configuring winrm service\"\r\n              netsh advfirewall firewall set rule group=\"File and Printer Sharing\" new enable=yes\r\n              cmd.exe /c winrm quickconfig -q\r\n              cmd.exe /c winrm set \"winrm/config\" '@{MaxTimeoutms=\"1800000\"}'\r\n              cmd.exe /c winrm set \"winrm/config/winrs\" '@{MaxMemoryPerShellMB=\"1024\"}'\r\n              cmd.exe /c winrm set \"winrm/config/service\" '@{AllowUnencrypted=\"false\"}'\r\n              cmd.exe /c winrm set \"winrm/config/client\" '@{AllowUnencrypted=\"false\"}'\r\n              cmd.exe /c winrm set \"winrm/config/service/auth\" '@{Basic=\"true\"}'\r\n              cmd.exe /c winrm set \"winrm/config/client/auth\" '@{Basic=\"true\"}'\r\n              cmd.exe /c winrm set \"winrm/config/service/auth\" '@{CredSSP=\"true\"}'\r\n          } catch  { Write-log -message \"configure winrm service - \"+ $_.Exception.message -level \"ERROR\"}\r\n      }\r\n\r\n      # Create local admin user\r\n      Create-LocalAdmin \r\n\r\n      # Configure WinRM service\r\n      Configure-WinRMService\r\n\r\n      # Configure WinRM listener\r\n      Configure-WinRMHttpsListener\r\n\r\n      # Add Firewall rules\r\n      Add-FirewallRule\r\n\r\n      # List the listeners\r\n      Write-Verbose -Verbose \"Listing the WinRM listeners:\"\r\n\r\n      Write-Verbose -Verbose \"Querying WinRM listeners by running command: winrm enumerate winrm/config/listener\"\r\n      winrm enumerate winrm/config/listener\r\n      \u003c/powershell\u003e\r\n",
            "template": "      \u003cpowershell\u003e\r\n      $logfilepath=\"C:\\agent.log\"\r\n      $fqdn=\"$env:computername\"\r\n      $port=5986 \r\n\r\n\r\n      $username = 'winadmin1'\r\n      $password = ConvertTo-SecureString '' -AsPlainText -Force \r\n\r\n\r\n      Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser -Force -ErrorAction Ignore\r\n      $ErrorActionPreference = \"stop\"\r\n\r\n      function Write-Log {\r\n        param(\r\n            [Parameter(Mandatory = $true)][string] $message,\r\n            [Parameter(Mandatory = $false)]\r\n            [ValidateSet(\"INFO\",\"WARN\",\"ERROR\")]\r\n            [string] $level = \"INFO\"\r\n        )\r\n        # Create timestamp\r\n        $timestamp = (Get-Date).toString(\"yyyy/MM/dd HH:mm:ss\")\r\n        # Append content to log file\r\n        Add-Content -Path $logfilepath -Value \"$timestamp [$level] - $message\"\r\n      }\r\n\r\n\r\n      function Create-LocalAdmin {\r\n          process {\r\n            try {\r\n              # Create new local user\r\n              New-LocalUser \"$username\" -Password $password -FullName \"$username\" -Description \"local admin\" -ErrorAction stop\r\n              Write-Log -message \"$username local user created\"\r\n\r\n              # Add user to administrator group\r\n              Add-LocalGroupMember -Group \"Administrators\" -Member \"$username\" -ErrorAction stop\r\n              Write-Log -message \"$username added to the Administrators group\"\r\n\r\n            }catch{ Write-log -message $_.Exception.message -level \"ERROR\"}\r\n          }    \r\n      }\r\n\r\n\r\n      function Delete-WinRMListener {\r\n          process {\r\n              $config = winrm enumerate winrm/config/listener\r\n              foreach($conf in $config) {\r\n                  Write-Log -message \"verifying listener configuration\"\r\n                  if($conf.Contains(\"HTTPS\")) {\r\n                      try {\r\n                          Write-Log -message \"HTTPS is already configured. Deleting the exisiting configuration\"\r\n                          Remove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse\r\n                      } catch { Write-log -message \"Remove HTTPS listener - \" + $_.Exception.message -level \"ERROR\"}\r\n                      break\r\n                  }\r\n              }\r\n          }\r\n      }\r\n\r\n\r\n      function Configure-WinRMHttpsListener {\r\n          \r\n          Delete-WinRMListener\r\n          \r\n            try {\r\n              Write-Log -message \"creating self-signed certificate\"\r\n              $Cert = (New-SelfSignedCertificate -CertstoreLocation Cert:\\LocalMachine\\My -dnsname $fqdn -NotAfter (Get-Date).AddMonths(36)).Thumbprint\r\n              \r\n              if(-not $Cert) {\r\n                  throw \"Failed to create the test certificate.\"\r\n                  Write-Log -message \"failed to create certificate\" -level \"ERROR\"\r\n              }\r\n              $WinrmCreate= \"winrm create --% winrm/config/Listener?Address=*+Transport=HTTPS @{Hostname=`\"$fqdn`\";CertificateThumbprint=`\"$Cert`\"}\"\r\n              invoke-expression $WinrmCreate\r\n              winrm set winrm/config/service/auth '@{Basic=\"true\"}'\r\n            } catch { Write-log -message \"Create certificate - \"+ $_.Exception.message -level \"ERROR\"}\r\n          \r\n      }\r\n\r\n\r\n      function Add-FirewallRule {\r\n          \r\n            try {\r\n              # Delete an exisitng rule\r\n              Write-Log -message \"Deleting the existing firewall rule for port $port\"\r\n              netsh advfirewall firewall delete rule name=\"Windows Remote Management (HTTPS-In)\" dir=in protocol=TCP localport=$port | Out-Null\r\n\r\n              # Add a new firewall rule\r\n              Write-Log -message \"Adding the firewall rule for port $port\"\r\n              netsh advfirewall firewall add rule name=\"Windows Remote Management (HTTPS-In)\" dir=in action=allow protocol=TCP localport=$port | Out-Null\r\n            } catch { Write-log -message \"Add/Remove firewall rule - \"+ $_.Exception.message -level \"ERROR\"}\r\n          \r\n      }\r\n\r\n\r\n      function Configure-WinRMService {\r\n\r\n          try {\r\n              Write-Log -message \"Configuring winrm service\"\r\n              netsh advfirewall firewall set rule group=\"File and Printer Sharing\" new enable=yes\r\n              cmd.exe /c winrm quickconfig -q\r\n              cmd.exe /c winrm set \"winrm/config\" '@{MaxTimeoutms=\"1800000\"}'\r\n              cmd.exe /c winrm set \"winrm/config/winrs\" '@{MaxMemoryPerShellMB=\"1024\"}'\r\n              cmd.exe /c winrm set \"winrm/config/service\" '@{AllowUnencrypted=\"false\"}'\r\n              cmd.exe /c winrm set \"winrm/config/client\" '@{AllowUnencrypted=\"false\"}'\r\n              cmd.exe /c winrm set \"winrm/config/service/auth\" '@{Basic=\"true\"}'\r\n              cmd.exe /c winrm set \"winrm/config/client/auth\" '@{Basic=\"true\"}'\r\n              cmd.exe /c winrm set \"winrm/config/service/auth\" '@{CredSSP=\"true\"}'\r\n          } catch  { Write-log -message \"configure winrm service - \"+ $_.Exception.message -level \"ERROR\"}\r\n      }\r\n\r\n      # Create local admin user\r\n      Create-LocalAdmin \r\n\r\n      # Configure WinRM service\r\n      Configure-WinRMService\r\n\r\n      # Configure WinRM listener\r\n      Configure-WinRMHttpsListener\r\n\r\n      # Add Firewall rules\r\n      Add-FirewallRule\r\n\r\n      # List the listeners\r\n      Write-Verbose -Verbose \"Listing the WinRM listeners:\"\r\n\r\n      Write-Verbose -Verbose \"Querying WinRM listeners by running command: winrm enumerate winrm/config/listener\"\r\n      winrm enumerate winrm/config/listener\r\n      \u003c/powershell\u003e\r\n",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "windows_eip",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-08f3316b1aec6c96c",
            "associate_with_private_ip": null,
            "association_id": "eipassoc-09ceeac2483dc5704",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-08f3316b1aec6c96c",
            "instance": "i-03951c8d5d9c4e96e",
            "network_border_group": "us-east-1",
            "network_interface": "eni-09d4b48b425fd2833",
            "private_dns": "ip-172-31-27-93.ec2.internal",
            "private_ip": "172.31.27.93",
            "public_dns": "ec2-54-160-53-18.compute-1.amazonaws.com",
            "public_ip": "54.160.53.18",
            "public_ipv4_pool": "amazon",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_instance.windows_server",
            "aws_security_group.winrm_sg",
            "data.aws_ami.windows-2019",
            "data.template_file.windows-userdata"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip_association",
      "name": "eip_assoc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-08f3316b1aec6c96c",
            "allow_reassociation": null,
            "id": "eipassoc-09ceeac2483dc5704",
            "instance_id": "i-03951c8d5d9c4e96e",
            "network_interface_id": "eni-09d4b48b425fd2833",
            "private_ip_address": "172.31.27.93",
            "public_ip": "54.160.53.18"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eip.windows_eip",
            "aws_instance.windows_server",
            "aws_security_group.winrm_sg",
            "data.aws_ami.windows-2019",
            "data.template_file.windows-userdata"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "windows_server",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-026bb75827bd3d68d",
            "arn": "arn:aws:ec2:us-east-1:710773069565:instance/i-03951c8d5d9c4e96e",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1c",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-03951c8d5d9c4e96e",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "deployer-key1",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-09d4b48b425fd2833",
            "private_dns": "ip-172-31-27-93.ec2.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.27.93",
            "public_dns": "ec2-54-167-91-234.compute-1.amazonaws.com",
            "public_ip": "54.167.91.234",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 105,
                "kms_key_id": "",
                "tags": null,
                "throughput": 0,
                "volume_id": "vol-09f2809b54148a851",
                "volume_size": 35,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "win2019"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0ab3d62c682f39346",
            "tags": {
              "Environment": "test",
              "Name": "windows-server-vm"
            },
            "tags_all": {
              "Environment": "test",
              "Name": "windows-server-vm"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "37eb967d187851b0da641c6364d116096f5be3ea",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-02f98f0caa6efbb0b"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_security_group.winrm_sg",
            "data.aws_ami.windows-2019",
            "data.template_file.windows-userdata"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "winrm_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:710773069565:security-group/sg-02f98f0caa6efbb0b",
            "description": "Used in the terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "id": "sg-02f98f0caa6efbb0b",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "RDP Access",
                "from_port": 3389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 3389
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "WinRM Access",
                "from_port": 5985,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5986
              }
            ],
            "name": "win2019",
            "name_prefix": "",
            "owner_id": "710773069565",
            "revoke_rules_on_delete": false,
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0b25511f48825ea60"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    }
  ],
  "check_results": []
}
